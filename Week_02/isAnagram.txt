 public static boolean isAnagram(String s, String t) {
        if (s == null || t == null) {
            return false;
        }
        if (s.length()!=t.length()) {
            return false;
        }
        char[] sChars=s.toCharArray();
        char[] tChars=t.toCharArray();
        Map<Character,Integer> map = new HashMap();
        for (char c :
                sChars) {
            if (map.get(c) == null) {
                map.put(c, 1);
            } else {
                map.put(c, ((Integer) map.get(c)) + 1);
            }
        }
        for (char c :
                tChars) {
            if (map.get(c) != null) {
                map.put(c, ((Integer) map.get(c))-1);
            }
        }

        for ( Integer i:
                map.values()) {
            if (i!=0){
                return false;
            }
        }
        return true;

    }

    public static boolean isAnagram2(String s, String t) {
        if (s == null || t == null) {
            return false;
        }
        if (s.length()!=t.length()) {
            return false;
        }
        char[] sChars=s.toCharArray();
        char[] tChars=t.toCharArray();
        Arrays.sort(sChars);
        Arrays.sort(tChars);
        return Arrays.equals(sChars,tChars);

    }

    public static boolean isAnagram3(String s, String t) {
        if (s == null || t == null || s.equals("") || t.equals("")) {
            return false;
        }
        if (s.length()!=t.length()) {

            return false;
        }
        char[] sChars=s.toCharArray();
        char[] tChars=t.toCharArray();
        LinkedList list=new LinkedList();
        for (char c:sChars
             ) {
            list.add(c);
        }
        for (char c:tChars
             ) {
            int i=list.indexOf(c);
            if (i >= 0) {
                list.remove(i);
            }
        }
        if (list.size() == 0) {
            return true;
        } else {
            return false;
        }
    }